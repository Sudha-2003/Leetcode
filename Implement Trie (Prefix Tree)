class trienode:
    def __init__(self):
        self.isEnding=False
        self.store=dict()

class Trie:

    def __init__(self):
        self.root=trienode()
        

    def insert(self, word: str) -> None:
        current=self.root
        for i in range(len(word)):
            if word[i] not in current.store:
                current.store[word[i]]=trienode()
            current=current.store[word[i]]
        current.isEnding=True

        

    def search(self, word: str) -> bool:
        current=self.root
        for i in range(len(word)):
            if word[i] not in current.store:
                return False
            current=current.store[word[i]]
        return current.isEnding
        

    def startsWith(self, prefix: str) -> bool:
        current=self.root
        for i in range(len(prefix)):
            if prefix[i] not in current.store:
                return False
            current=current.store[prefix[i]]
        return True        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
